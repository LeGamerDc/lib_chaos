// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wire.proto

package wire

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CallType int32

const (
	CallType_OneWay    CallType = 0
	CallType_Call      CallType = 1
	CallType_Reply     CallType = 2
	CallType_Exception CallType = 3
)

var CallType_name = map[int32]string{
	0: "OneWay",
	1: "Call",
	2: "Reply",
	3: "Exception",
}

var CallType_value = map[string]int32{
	"OneWay":    0,
	"Call":      1,
	"Reply":     2,
	"Exception": 3,
}

func (x CallType) String() string {
	return proto.EnumName(CallType_name, int32(x))
}

func (CallType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdddcdf68d8e0, []int{0}
}

type Msg struct {
	Seq     uint32   `protobuf:"varint,1,opt,name=Seq,json=seq,proto3" json:"Seq,omitempty"`
	Type    CallType `protobuf:"varint,2,opt,name=Type,json=type,proto3,enum=wire.CallType" json:"Type,omitempty"`
	Api     int32    `protobuf:"varint,3,opt,name=Api,json=api,proto3" json:"Api,omitempty"`
	ErrCode int32    `protobuf:"varint,4,opt,name=ErrCode,json=errCode,proto3" json:"ErrCode,omitempty"`
	Data    []byte   `protobuf:"bytes,5,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
	Extra   []byte   `protobuf:"bytes,6,opt,name=Extra,json=extra,proto3" json:"Extra,omitempty"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2dcdddcdf68d8e0, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("wire.CallType", CallType_name, CallType_value)
	proto.RegisterType((*Msg)(nil), "wire.Msg")
}

func init() { proto.RegisterFile("wire.proto", fileDescriptor_f2dcdddcdf68d8e0) }

var fileDescriptor_f2dcdddcdf68d8e0 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0xcf, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x06, 0xe0, 0x4c, 0x77, 0x93, 0xb6, 0x83, 0x2d, 0x61, 0xf0, 0xb0, 0x88, 0x2c, 0xa1, 0xa7,
	0xe0, 0xa1, 0x07, 0xbd, 0x79, 0xd3, 0x9a, 0xa3, 0x08, 0x51, 0xf0, 0xbc, 0xda, 0x21, 0x04, 0x42,
	0x77, 0x9b, 0x2e, 0xd8, 0xbc, 0x85, 0xbe, 0x55, 0x8f, 0x3d, 0x7a, 0xd4, 0xe4, 0x45, 0x24, 0x29,
	0xde, 0xe6, 0xff, 0x60, 0x66, 0xf8, 0x11, 0x3f, 0xca, 0x9a, 0x97, 0xae, 0xb6, 0xde, 0x92, 0xec,
	0xe7, 0x0b, 0x2c, 0x6c, 0x61, 0x4f, 0xb2, 0xf8, 0x02, 0x14, 0x8f, 0xbb, 0x82, 0x62, 0x14, 0xcf,
	0xbc, 0x55, 0x90, 0x40, 0x3a, 0xcb, 0xc5, 0x8e, 0xb7, 0xb4, 0x40, 0xf9, 0xd2, 0x38, 0x56, 0xa3,
	0x04, 0xd2, 0xf9, 0xf5, 0x7c, 0x39, 0x9c, 0x59, 0x99, 0xaa, 0xea, 0x35, 0x97, 0xbe, 0x71, 0xdc,
	0x6f, 0xdd, 0xb9, 0x52, 0x89, 0x04, 0xd2, 0x30, 0x17, 0xc6, 0x95, 0xa4, 0x70, 0x9c, 0xd5, 0xf5,
	0xca, 0xae, 0x59, 0xc9, 0x41, 0xc7, 0x7c, 0x8a, 0x44, 0x28, 0x1f, 0x8c, 0x37, 0x2a, 0x4c, 0x20,
	0x3d, 0xcb, 0xe5, 0xda, 0x78, 0x43, 0xe7, 0x18, 0x66, 0x7b, 0x5f, 0x1b, 0x15, 0x0d, 0x18, 0x72,
	0x1f, 0xae, 0x6e, 0x71, 0xf2, 0xff, 0x87, 0x10, 0xa3, 0xa7, 0x0d, 0xbf, 0x9a, 0x26, 0x0e, 0x68,
	0x82, 0xb2, 0xf7, 0x18, 0x68, 0x8a, 0x61, 0xce, 0xae, 0x6a, 0xe2, 0x11, 0xcd, 0x70, 0x9a, 0xed,
	0xdf, 0xd9, 0xf9, 0xd2, 0x6e, 0x62, 0x71, 0x7f, 0x79, 0xf8, 0xd5, 0xc1, 0xa1, 0xd5, 0x70, 0x6c,
	0x35, 0xfc, 0xb4, 0x1a, 0x3e, 0x3b, 0x1d, 0x1c, 0x3b, 0x1d, 0x7c, 0x77, 0x3a, 0x78, 0x8b, 0x86,
	0xd2, 0x37, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x52, 0x83, 0x50, 0x14, 0x01, 0x00, 0x00,
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintWire(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintWire(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ErrCode != 0 {
		i = encodeVarintWire(dAtA, i, uint64(m.ErrCode))
		i--
		dAtA[i] = 0x20
	}
	if m.Api != 0 {
		i = encodeVarintWire(dAtA, i, uint64(m.Api))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintWire(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Seq != 0 {
		i = encodeVarintWire(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWire(dAtA []byte, offset int, v uint64) int {
	offset -= sovWire(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovWire(uint64(m.Seq))
	}
	if m.Type != 0 {
		n += 1 + sovWire(uint64(m.Type))
	}
	if m.Api != 0 {
		n += 1 + sovWire(uint64(m.Api))
	}
	if m.ErrCode != 0 {
		n += 1 + sovWire(uint64(m.ErrCode))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovWire(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovWire(uint64(l))
	}
	return n
}

func sovWire(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWire(x uint64) (n int) {
	return sovWire(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWire
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			m.Api = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Api |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWire
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWire
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWire
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWire
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWire
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWire(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWire
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWire
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWire(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWire
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWire
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWire
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWire
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWire
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWire
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWire        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWire          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWire = fmt.Errorf("proto: unexpected end of group")
)
